// <auto-generated />
using System;
using EmissionsMonitorDataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmissionsMonitorDataAccess.Database.Migrations
{
    [DbContext(typeof(EmissionsMonitorContext))]
    [Migration("20221209054610_independent study exp")]
    partial class independentstudyexp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmissionsMonitorModel.DataSources.DataSourceBase", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceId"), 1L, 1);

                    b.Property<string>("SourceDetailsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.HasKey("SourceId");

                    b.ToTable("DATA_SOURCE", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.DailyCarbonTrend.DailyCarbonExperiment", b =>
                {
                    b.Property<int>("ExperimentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperimentId"), 1L, 1);

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExperimentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("NodeIdsString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ExperimentId");

                    b.ToTable("DAILY_CARBON_EXPERIMENT", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.DailyCarbonTrend.DailyCarbonExperimentRecord", b =>
                {
                    b.Property<int>("ExperimentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Co2InKilograms")
                        .HasColumnType("float");

                    b.Property<double>("Co2InMetricTons")
                        .HasColumnType("float");

                    b.Property<double>("FuelCostInDollars")
                        .HasColumnType("float");

                    b.HasKey("ExperimentId", "Date");

                    b.ToTable("DAILY_CARBON_EXPERIMENT_RECORD", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.IndStudyExp.IndStudyExperiment", b =>
                {
                    b.Property<int>("ExperimentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperimentId"), 1L, 1);

                    b.Property<string>("DataResolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExperimentData")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FinalChilledWaterNodeId")
                        .HasColumnType("int");

                    b.Property<int>("FinalElectricNodeId")
                        .HasColumnType("int");

                    b.Property<int>("FinalSteamNodeId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ExperimentId");

                    b.ToTable("IND_STUDY_EXPERIMENT", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.IndStudyExp.IndStudyExperimentRecord", b =>
                {
                    b.Property<int>("ExperimentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("ChilledWaterCostInDollars")
                        .HasColumnType("float");

                    b.Property<double>("ChilledWaterCostPerGallon")
                        .HasColumnType("float");

                    b.Property<double>("ChilledWaterEmissionsFactorInKilogramsCo2PerGallon")
                        .HasColumnType("float");

                    b.Property<double>("ChilledWaterEmissionsInMetricTons")
                        .HasColumnType("float");

                    b.Property<double>("ChilledWaterTotalInGallons")
                        .HasColumnType("float");

                    b.Property<double>("ElectricCostInDollars")
                        .HasColumnType("float");

                    b.Property<double>("ElectricCostPerKwh")
                        .HasColumnType("float");

                    b.Property<double>("ElectricEmissionsFactorInKilogramsCo2PerKwh")
                        .HasColumnType("float");

                    b.Property<double>("ElectricEmissionsInMetricTons")
                        .HasColumnType("float");

                    b.Property<double>("ElectricTotalInKwh")
                        .HasColumnType("float");

                    b.Property<double>("SteamCostDollarsPerMMBTU")
                        .HasColumnType("float");

                    b.Property<double>("SteamCostInDollars")
                        .HasColumnType("float");

                    b.Property<double>("SteamEmissionsFactorInKilogramsCo2PerMMBTU")
                        .HasColumnType("float");

                    b.Property<double>("SteamEmissionsInMetricTons")
                        .HasColumnType("float");

                    b.Property<double>("SteamTotalInMMBTU")
                        .HasColumnType("float");

                    b.Property<double>("TotalCostInDollars")
                        .HasColumnType("float");

                    b.Property<double>("TotalEmissionsInMetricTons")
                        .HasColumnType("float");

                    b.HasKey("ExperimentId", "Timestamp");

                    b.ToTable("IND_STUDY_EXPERIMENT_RECORD", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.Folder", b =>
                {
                    b.Property<int>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FolderId"), 1L, 1);

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.HasKey("FolderId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("FOLDER", (string)null);
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.SaveItem", b =>
                {
                    b.Property<int>("SaveItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaveItemId"), 1L, 1);

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("SaveItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SaveItemType")
                        .HasColumnType("int");

                    b.HasKey("SaveItemId");

                    b.HasIndex("FolderId");

                    b.ToTable("SAVE_ITEM", (string)null);

                    b.HasDiscriminator<int>("SaveItemType").HasValue(0);
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.ExploreSetSaveItem", b =>
                {
                    b.HasBaseType("EmissionsMonitorModel.VirtualFileSystem.SaveItem");

                    b.Property<string>("ExploreSetJsonDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.ModelSaveItem", b =>
                {
                    b.HasBaseType("EmissionsMonitorModel.VirtualFileSystem.SaveItem");

                    b.Property<string>("ProcessModelJsonDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.DailyCarbonTrend.DailyCarbonExperimentRecord", b =>
                {
                    b.HasOne("EmissionsMonitorModel.Experiments.DailyCarbonTrend.DailyCarbonExperiment", "Experiment")
                        .WithMany("ExperimentRecords")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.IndStudyExp.IndStudyExperimentRecord", b =>
                {
                    b.HasOne("EmissionsMonitorModel.Experiments.IndStudyExp.IndStudyExperiment", "Experiment")
                        .WithMany("ExperimentRecords")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experiment");
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.Folder", b =>
                {
                    b.HasOne("EmissionsMonitorModel.VirtualFileSystem.Folder", null)
                        .WithMany("ChildFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.SaveItem", b =>
                {
                    b.HasOne("EmissionsMonitorModel.VirtualFileSystem.Folder", "Folder")
                        .WithMany("SaveItems")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.DailyCarbonTrend.DailyCarbonExperiment", b =>
                {
                    b.Navigation("ExperimentRecords");
                });

            modelBuilder.Entity("EmissionsMonitorModel.Experiments.IndStudyExp.IndStudyExperiment", b =>
                {
                    b.Navigation("ExperimentRecords");
                });

            modelBuilder.Entity("EmissionsMonitorModel.VirtualFileSystem.Folder", b =>
                {
                    b.Navigation("ChildFolders");

                    b.Navigation("SaveItems");
                });
#pragma warning restore 612, 618
        }
    }
}
